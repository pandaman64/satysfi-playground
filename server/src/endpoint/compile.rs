use actix_web::{web, Responder};
use serde::{Deserialize, Serialize};

use crate::{podman, Data};

#[derive(Deserialize)]
pub struct Request {
    /// The SATySFi source in base64-encoded string.
    source: String,
}

#[derive(Serialize)]
pub struct Response {
    /// The status code of podman (and satysfi), if any.
    ///
    /// When the process is terminated by signal, this field is None. For more detail, please consult [`std::process::ExitStatus::code`].
    status: Option<i32>,
    /// The stdout of satysfi in base64-encoded string.
    stdout: String,
    /// The stderr of satysfi in base64-encoded string.
    stderr: String,
    /// The PDF file generated by satysfi in base64-encoded string.
    document: Option<String>,
}

#[actix_web::post("/compile")]
pub async fn post(
    request: web::Json<Request>,
    data: web::Data<Data>,
) -> Result<impl Responder, actix_web::Error> {
    let (output, document) = web::block(podman(request.into_inner().source, data)).await??;

    Ok(web::Json(Response {
        status: output.status.code(),
        stdout: base64::encode(output.stdout),
        stderr: base64::encode(output.stderr),
        document: document.map(base64::encode),
    }))
}
